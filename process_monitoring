#!/bin/sh

########################################################################
# process_monitoring: Munin Plugin for Monitoring Required Processes
#
#  Description:
#  This plugin monitors the presence and count of essential system
#  processes and configuration rules. Designed for use with Munin,
#  it reports the number of running instances or matching configurations,
#  such as iptables rules, ntpd, memcached, postgres, apache2,
#  and MySQL-compatible servers (mysqld / mariadbd).
#
#  It helps system administrators ensure that critical services are
#  running as expected. The plugin outputs a graph in Munin showing
#  the state of required processes.
#
#  Author: id774 (More info: http://id774.net)
#  Source Code: https://github.com/id774/munin-plugins
#  License: The GPL version 3, or LGPL version 3 (Dual License).
#  Contact: idnanashi@gmail.com
#
#  Version History:
#  v1.1 2025-08-29
#       Add MySQL (mysqld / mariadbd) process monitoring (label: mysql).
#  v1.0 2025-03-26
#       Refactored for POSIX compliance. Added full header documentation,
#       improved readability and maintainability with English comments.
#  v0.1 2018-09-18
#       Initial version.
#
#  Usage:
#      sudo ln -s /usr/local/share/munin/plugins/process_monitoring /etc/munin/plugins/process_monitoring
#
#      Then reload munin-node:
#      sudo systemctl restart munin-node
#
#  Example:
#      ./process_monitoring autoconf
#      ./process_monitoring config
#      ./process_monitoring
#
########################################################################

#%# family=contrib
#%# capabilities=autoconf

# Display script usage information
usage() {
    awk '
        BEGIN { in_usage = 0 }
        /^#  Usage:/ { in_usage = 1; print substr($0, 4); next }
        /^#{10}/ { if (in_usage) exit }
        in_usage && /^#/ { print substr($0, 4) }
    ' "$0"
    exit 0
}

# --- Autoconf check ---
autoconf() {
    # Exit code flag for autoconf checks
    CONF_ERR=0

    # Check for required commands
    for cmd in ps grep wc iptables memcached; do
        command -v "$cmd" >/dev/null 2>&1 || CONF_ERR=1
    done

    if [ "$CONF_ERR" -eq 0 ]; then
        echo "yes"
        return 0
    else
        echo "no"
        return 0
    fi
}

# --- Munin graph configuration output ---
config() {
    echo "graph_category processes"
    echo "graph_title Required processes"
    echo "graph_vlabel Number of required processes"
    echo "graph_args --lower-limit 0 --upper-limit 10"

    # Define label and graph style for each monitored service
    echo "iptables.label iptables"
    echo "ntpd.label ntp"
    echo "memcached.label memcached"
    echo "postgres.label postgres"
    echo "mysql.label mysql"
    echo "apache2.label apache2"

    echo "iptables.draw LINE2"
    echo "ntpd.draw LINE2"
    echo "memcached.draw LINE2"
    echo "postgres.draw LINE2"
    echo "mysql.draw LINE2"
    echo "apache2.draw LINE2"

    echo "iptables.warning 1:"
    echo "iptables.critical 1:"
    echo "ntpd.warning 1:"
    echo "ntpd.critical 1:"
    echo "memcached.warning 1:"
    echo "memcached.critical 1:"
    echo "postgres.warning 1:"
    echo "postgres.critical 1:"
    echo "mysql.warning 1:"
    echo "mysql.critical 1:"
    echo "apache2.warning 1:"
    echo "apache2.critical 1:"
}

# --- Data collection phase ---
fetch() {
    # Count iptables rules matching specific description
    CMD=$(sudo iptables -vn -L 2>/dev/null | grep "SET name: SSH side: source" | wc -l)
    echo "iptables.value $CMD"

    # Count ntpd processes (excluding grep itself)
    CMD=$(ps -H aux | grep "[n]tpd" | wc -l)
    echo "ntpd.value $CMD"

    # Count memcached processes
    CMD=$(ps -H aux | grep "[m]emcached" | wc -l)
    echo "memcached.value $CMD"

    # Optional: Monitor other processes if applicable
    CMD=$(ps -H aux | grep "[p]ostgres" | wc -l)
    echo "postgres.value $CMD"
    CMD=$(ps -H aux | grep -E "[m](ysqld|ariadbd)" | wc -l)
    echo "mysql.value $CMD"
    CMD=$(ps -H aux | grep "[a]pache2" | wc -l)
    echo "apache2.value $CMD"

    return 0
}

# Main entry point of the script
main() {
    case "$1" in
        -h|--help|-v|--version) usage ;;
        autoconf) autoconf ;;
        config) config ;;
        *) fetch ;;
    esac
    return $?
}

# Execute main function
main "$@"
exit $?
